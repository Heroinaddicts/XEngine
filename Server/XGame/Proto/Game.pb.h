// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Game_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Game_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Game_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Game_2eproto;
class oNuller;
class oNullerDefaultTypeInternal;
extern oNullerDefaultTypeInternal _oNuller_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::oNuller* Arena::CreateMaybeMessage<::oNuller>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum eError : int {
  UNKNOWN = 0,
  SUCCESS = 1,
  eError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eError_IsValid(int value);
constexpr eError eError_MIN = UNKNOWN;
constexpr eError eError_MAX = SUCCESS;
constexpr int eError_ARRAYSIZE = eError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eError_descriptor();
template<typename T>
inline const std::string& eError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eError_descriptor(), enum_t_value);
}
inline bool eError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eError>(
    eError_descriptor(), name, value);
}
enum eClientPID : int {
  NOT_USE_CID = 0,
  eClientPID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eClientPID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eClientPID_IsValid(int value);
constexpr eClientPID eClientPID_MIN = NOT_USE_CID;
constexpr eClientPID eClientPID_MAX = NOT_USE_CID;
constexpr int eClientPID_ARRAYSIZE = eClientPID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eClientPID_descriptor();
template<typename T>
inline const std::string& eClientPID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eClientPID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eClientPID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eClientPID_descriptor(), enum_t_value);
}
inline bool eClientPID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eClientPID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eClientPID>(
    eClientPID_descriptor(), name, value);
}
enum eServerPID : int {
  NOT_USE_SID = 0,
  eServerPID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eServerPID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eServerPID_IsValid(int value);
constexpr eServerPID eServerPID_MIN = NOT_USE_SID;
constexpr eServerPID eServerPID_MAX = NOT_USE_SID;
constexpr int eServerPID_ARRAYSIZE = eServerPID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eServerPID_descriptor();
template<typename T>
inline const std::string& eServerPID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eServerPID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eServerPID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eServerPID_descriptor(), enum_t_value);
}
inline bool eServerPID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eServerPID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eServerPID>(
    eServerPID_descriptor(), name, value);
}
// ===================================================================

class oNuller PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:oNuller) */ {
 public:
  inline oNuller() : oNuller(nullptr) {}
  virtual ~oNuller();

  oNuller(const oNuller& from);
  oNuller(oNuller&& from) noexcept
    : oNuller() {
    *this = ::std::move(from);
  }

  inline oNuller& operator=(const oNuller& from) {
    CopyFrom(from);
    return *this;
  }
  inline oNuller& operator=(oNuller&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oNuller& default_instance();

  static inline const oNuller* internal_default_instance() {
    return reinterpret_cast<const oNuller*>(
               &_oNuller_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(oNuller& a, oNuller& b) {
    a.Swap(&b);
  }
  inline void Swap(oNuller* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oNuller* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oNuller* New() const final {
    return CreateMaybeMessage<oNuller>(nullptr);
  }

  oNuller* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oNuller>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oNuller& from);
  void MergeFrom(const oNuller& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oNuller* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "oNuller";
  }
  protected:
  explicit oNuller(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Game_2eproto);
    return ::descriptor_table_Game_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:oNuller)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Game_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// oNuller

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::eError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eError>() {
  return ::eError_descriptor();
}
template <> struct is_proto_enum< ::eClientPID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eClientPID>() {
  return ::eClientPID_descriptor();
}
template <> struct is_proto_enum< ::eServerPID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::eServerPID>() {
  return ::eServerPID_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Game_2eproto
