// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: architecture.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_architecture_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_architecture_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_architecture_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_architecture_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_architecture_2eproto;
namespace architecture {
class oAddress;
class oAddressDefaultTypeInternal;
extern oAddressDefaultTypeInternal _oAddress_default_instance_;
class oAssigneID;
class oAssigneIDDefaultTypeInternal;
extern oAssigneIDDefaultTypeInternal _oAssigneID_default_instance_;
class oBroadcastNoder;
class oBroadcastNoderDefaultTypeInternal;
extern oBroadcastNoderDefaultTypeInternal _oBroadcastNoder_default_instance_;
class oForwardClientMessage;
class oForwardClientMessageDefaultTypeInternal;
extern oForwardClientMessageDefaultTypeInternal _oForwardClientMessage_default_instance_;
class oLocation;
class oLocationDefaultTypeInternal;
extern oLocationDefaultTypeInternal _oLocation_default_instance_;
class oNoderInited;
class oNoderInitedDefaultTypeInternal;
extern oNoderInitedDefaultTypeInternal _oNoderInited_default_instance_;
class oReport;
class oReportDefaultTypeInternal;
extern oReportDefaultTypeInternal _oReport_default_instance_;
class oSendMessageToClient;
class oSendMessageToClientDefaultTypeInternal;
extern oSendMessageToClientDefaultTypeInternal _oSendMessageToClient_default_instance_;
class oShutdown;
class oShutdownDefaultTypeInternal;
extern oShutdownDefaultTypeInternal _oShutdown_default_instance_;
}  // namespace architecture
PROTOBUF_NAMESPACE_OPEN
template<> ::architecture::oAddress* Arena::CreateMaybeMessage<::architecture::oAddress>(Arena*);
template<> ::architecture::oAssigneID* Arena::CreateMaybeMessage<::architecture::oAssigneID>(Arena*);
template<> ::architecture::oBroadcastNoder* Arena::CreateMaybeMessage<::architecture::oBroadcastNoder>(Arena*);
template<> ::architecture::oForwardClientMessage* Arena::CreateMaybeMessage<::architecture::oForwardClientMessage>(Arena*);
template<> ::architecture::oLocation* Arena::CreateMaybeMessage<::architecture::oLocation>(Arena*);
template<> ::architecture::oNoderInited* Arena::CreateMaybeMessage<::architecture::oNoderInited>(Arena*);
template<> ::architecture::oReport* Arena::CreateMaybeMessage<::architecture::oReport>(Arena*);
template<> ::architecture::oSendMessageToClient* Arena::CreateMaybeMessage<::architecture::oSendMessageToClient>(Arena*);
template<> ::architecture::oShutdown* Arena::CreateMaybeMessage<::architecture::oShutdown>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace architecture {

enum eArchProtoID : int {
  Report = 0,
  AssigneID = 1,
  NoderInited = 2,
  BroadcastNoder = 3,
  ForwardClientMessage = 4,
  SendMessageToClient = 5,
  Shutdown = 6,
  Location = 51,
  eArchProtoID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eArchProtoID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eArchProtoID_IsValid(int value);
constexpr eArchProtoID eArchProtoID_MIN = Report;
constexpr eArchProtoID eArchProtoID_MAX = Location;
constexpr int eArchProtoID_ARRAYSIZE = eArchProtoID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eArchProtoID_descriptor();
template<typename T>
inline const std::string& eArchProtoID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eArchProtoID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eArchProtoID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eArchProtoID_descriptor(), enum_t_value);
}
inline bool eArchProtoID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eArchProtoID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eArchProtoID>(
    eArchProtoID_descriptor(), name, value);
}
enum eLocationType : int {
  appear = 0,
  disappear = 1,
  eLocationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  eLocationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool eLocationType_IsValid(int value);
constexpr eLocationType eLocationType_MIN = appear;
constexpr eLocationType eLocationType_MAX = disappear;
constexpr int eLocationType_ARRAYSIZE = eLocationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eLocationType_descriptor();
template<typename T>
inline const std::string& eLocationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eLocationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eLocationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eLocationType_descriptor(), enum_t_value);
}
inline bool eLocationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eLocationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eLocationType>(
    eLocationType_descriptor(), name, value);
}
// ===================================================================

class oAddress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oAddress) */ {
 public:
  inline oAddress() : oAddress(nullptr) {}
  virtual ~oAddress();

  oAddress(const oAddress& from);
  oAddress(oAddress&& from) noexcept
    : oAddress() {
    *this = ::std::move(from);
  }

  inline oAddress& operator=(const oAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline oAddress& operator=(oAddress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oAddress& default_instance();

  static inline const oAddress* internal_default_instance() {
    return reinterpret_cast<const oAddress*>(
               &_oAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(oAddress& a, oAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(oAddress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oAddress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oAddress* New() const final {
    return CreateMaybeMessage<oAddress>(nullptr);
  }

  oAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oAddress& from);
  void MergeFrom(const oAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oAddress";
  }
  protected:
  explicit oAddress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kAreaFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 area = 1;
  void clear_area();
  ::PROTOBUF_NAMESPACE_ID::int32 area() const;
  void set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_area() const;
  void _internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 port = 3;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oAddress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 area_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oReport) */ {
 public:
  inline oReport() : oReport(nullptr) {}
  virtual ~oReport();

  oReport(const oReport& from);
  oReport(oReport&& from) noexcept
    : oReport() {
    *this = ::std::move(from);
  }

  inline oReport& operator=(const oReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline oReport& operator=(oReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oReport& default_instance();

  static inline const oReport* internal_default_instance() {
    return reinterpret_cast<const oReport*>(
               &_oReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(oReport& a, oReport& b) {
    a.Swap(&b);
  }
  inline void Swap(oReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oReport* New() const final {
    return CreateMaybeMessage<oReport>(nullptr);
  }

  oReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oReport& from);
  void MergeFrom(const oReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oReport";
  }
  protected:
  explicit oReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressFieldNumber = 3,
    kIdfaFieldNumber = 4,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .architecture.oAddress address = 3;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::architecture::oAddress& address() const;
  ::architecture::oAddress* release_address();
  ::architecture::oAddress* mutable_address();
  void set_allocated_address(::architecture::oAddress* address);
  private:
  const ::architecture::oAddress& _internal_address() const;
  ::architecture::oAddress* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::architecture::oAddress* address);
  ::architecture::oAddress* unsafe_arena_release_address();

  // int64 idfa = 4;
  void clear_idfa();
  ::PROTOBUF_NAMESPACE_ID::int64 idfa() const;
  void set_idfa(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_idfa() const;
  void _internal_set_idfa(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::architecture::oAddress* address_;
  ::PROTOBUF_NAMESPACE_ID::int64 idfa_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oAssigneID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oAssigneID) */ {
 public:
  inline oAssigneID() : oAssigneID(nullptr) {}
  virtual ~oAssigneID();

  oAssigneID(const oAssigneID& from);
  oAssigneID(oAssigneID&& from) noexcept
    : oAssigneID() {
    *this = ::std::move(from);
  }

  inline oAssigneID& operator=(const oAssigneID& from) {
    CopyFrom(from);
    return *this;
  }
  inline oAssigneID& operator=(oAssigneID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oAssigneID& default_instance();

  static inline const oAssigneID* internal_default_instance() {
    return reinterpret_cast<const oAssigneID*>(
               &_oAssigneID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(oAssigneID& a, oAssigneID& b) {
    a.Swap(&b);
  }
  inline void Swap(oAssigneID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oAssigneID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oAssigneID* New() const final {
    return CreateMaybeMessage<oAssigneID>(nullptr);
  }

  oAssigneID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oAssigneID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oAssigneID& from);
  void MergeFrom(const oAssigneID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oAssigneID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oAssigneID";
  }
  protected:
  explicit oAssigneID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oAssigneID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oNoderInited PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oNoderInited) */ {
 public:
  inline oNoderInited() : oNoderInited(nullptr) {}
  virtual ~oNoderInited();

  oNoderInited(const oNoderInited& from);
  oNoderInited(oNoderInited&& from) noexcept
    : oNoderInited() {
    *this = ::std::move(from);
  }

  inline oNoderInited& operator=(const oNoderInited& from) {
    CopyFrom(from);
    return *this;
  }
  inline oNoderInited& operator=(oNoderInited&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oNoderInited& default_instance();

  static inline const oNoderInited* internal_default_instance() {
    return reinterpret_cast<const oNoderInited*>(
               &_oNoderInited_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(oNoderInited& a, oNoderInited& b) {
    a.Swap(&b);
  }
  inline void Swap(oNoderInited* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oNoderInited* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oNoderInited* New() const final {
    return CreateMaybeMessage<oNoderInited>(nullptr);
  }

  oNoderInited* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oNoderInited>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oNoderInited& from);
  void MergeFrom(const oNoderInited& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oNoderInited* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oNoderInited";
  }
  protected:
  explicit oNoderInited(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:architecture.oNoderInited)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oBroadcastNoder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oBroadcastNoder) */ {
 public:
  inline oBroadcastNoder() : oBroadcastNoder(nullptr) {}
  virtual ~oBroadcastNoder();

  oBroadcastNoder(const oBroadcastNoder& from);
  oBroadcastNoder(oBroadcastNoder&& from) noexcept
    : oBroadcastNoder() {
    *this = ::std::move(from);
  }

  inline oBroadcastNoder& operator=(const oBroadcastNoder& from) {
    CopyFrom(from);
    return *this;
  }
  inline oBroadcastNoder& operator=(oBroadcastNoder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oBroadcastNoder& default_instance();

  static inline const oBroadcastNoder* internal_default_instance() {
    return reinterpret_cast<const oBroadcastNoder*>(
               &_oBroadcastNoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(oBroadcastNoder& a, oBroadcastNoder& b) {
    a.Swap(&b);
  }
  inline void Swap(oBroadcastNoder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oBroadcastNoder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oBroadcastNoder* New() const final {
    return CreateMaybeMessage<oBroadcastNoder>(nullptr);
  }

  oBroadcastNoder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oBroadcastNoder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oBroadcastNoder& from);
  void MergeFrom(const oBroadcastNoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oBroadcastNoder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oBroadcastNoder";
  }
  protected:
  explicit oBroadcastNoder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .architecture.oReport info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::architecture::oReport& info() const;
  ::architecture::oReport* release_info();
  ::architecture::oReport* mutable_info();
  void set_allocated_info(::architecture::oReport* info);
  private:
  const ::architecture::oReport& _internal_info() const;
  ::architecture::oReport* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::architecture::oReport* info);
  ::architecture::oReport* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:architecture.oBroadcastNoder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::architecture::oReport* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oForwardClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oForwardClientMessage) */ {
 public:
  inline oForwardClientMessage() : oForwardClientMessage(nullptr) {}
  virtual ~oForwardClientMessage();

  oForwardClientMessage(const oForwardClientMessage& from);
  oForwardClientMessage(oForwardClientMessage&& from) noexcept
    : oForwardClientMessage() {
    *this = ::std::move(from);
  }

  inline oForwardClientMessage& operator=(const oForwardClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline oForwardClientMessage& operator=(oForwardClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oForwardClientMessage& default_instance();

  static inline const oForwardClientMessage* internal_default_instance() {
    return reinterpret_cast<const oForwardClientMessage*>(
               &_oForwardClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(oForwardClientMessage& a, oForwardClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(oForwardClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oForwardClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oForwardClientMessage* New() const final {
    return CreateMaybeMessage<oForwardClientMessage>(nullptr);
  }

  oForwardClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oForwardClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oForwardClientMessage& from);
  void MergeFrom(const oForwardClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oForwardClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oForwardClientMessage";
  }
  protected:
  explicit oForwardClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kAccountFieldNumber = 2,
    kProtoidFieldNumber = 1,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 account = 2;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::int64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 protoid = 1;
  void clear_protoid();
  ::PROTOBUF_NAMESPACE_ID::int32 protoid() const;
  void set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protoid() const;
  void _internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oForwardClientMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_;
  ::PROTOBUF_NAMESPACE_ID::int32 protoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oSendMessageToClient PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oSendMessageToClient) */ {
 public:
  inline oSendMessageToClient() : oSendMessageToClient(nullptr) {}
  virtual ~oSendMessageToClient();

  oSendMessageToClient(const oSendMessageToClient& from);
  oSendMessageToClient(oSendMessageToClient&& from) noexcept
    : oSendMessageToClient() {
    *this = ::std::move(from);
  }

  inline oSendMessageToClient& operator=(const oSendMessageToClient& from) {
    CopyFrom(from);
    return *this;
  }
  inline oSendMessageToClient& operator=(oSendMessageToClient&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oSendMessageToClient& default_instance();

  static inline const oSendMessageToClient* internal_default_instance() {
    return reinterpret_cast<const oSendMessageToClient*>(
               &_oSendMessageToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(oSendMessageToClient& a, oSendMessageToClient& b) {
    a.Swap(&b);
  }
  inline void Swap(oSendMessageToClient* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oSendMessageToClient* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oSendMessageToClient* New() const final {
    return CreateMaybeMessage<oSendMessageToClient>(nullptr);
  }

  oSendMessageToClient* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oSendMessageToClient>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oSendMessageToClient& from);
  void MergeFrom(const oSendMessageToClient& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oSendMessageToClient* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oSendMessageToClient";
  }
  protected:
  explicit oSendMessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kAccountFieldNumber = 2,
    kProtoidFieldNumber = 1,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 account = 2;
  void clear_account();
  ::PROTOBUF_NAMESPACE_ID::int64 account() const;
  void set_account(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_account() const;
  void _internal_set_account(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 protoid = 1;
  void clear_protoid();
  ::PROTOBUF_NAMESPACE_ID::int32 protoid() const;
  void set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protoid() const;
  void _internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oSendMessageToClient)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 account_;
  ::PROTOBUF_NAMESPACE_ID::int32 protoid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oLocation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oLocation) */ {
 public:
  inline oLocation() : oLocation(nullptr) {}
  virtual ~oLocation();

  oLocation(const oLocation& from);
  oLocation(oLocation&& from) noexcept
    : oLocation() {
    *this = ::std::move(from);
  }

  inline oLocation& operator=(const oLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline oLocation& operator=(oLocation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oLocation& default_instance();

  static inline const oLocation* internal_default_instance() {
    return reinterpret_cast<const oLocation*>(
               &_oLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(oLocation& a, oLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(oLocation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oLocation* New() const final {
    return CreateMaybeMessage<oLocation>(nullptr);
  }

  oLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oLocation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oLocation& from);
  void MergeFrom(const oLocation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oLocation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oLocation";
  }
  protected:
  explicit oLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .architecture.eLocationType type = 2;
  void clear_type();
  ::architecture::eLocationType type() const;
  void set_type(::architecture::eLocationType value);
  private:
  ::architecture::eLocationType _internal_type() const;
  void _internal_set_type(::architecture::eLocationType value);
  public:

  // @@protoc_insertion_point(class_scope:architecture.oLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// -------------------------------------------------------------------

class oShutdown PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:architecture.oShutdown) */ {
 public:
  inline oShutdown() : oShutdown(nullptr) {}
  virtual ~oShutdown();

  oShutdown(const oShutdown& from);
  oShutdown(oShutdown&& from) noexcept
    : oShutdown() {
    *this = ::std::move(from);
  }

  inline oShutdown& operator=(const oShutdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline oShutdown& operator=(oShutdown&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const oShutdown& default_instance();

  static inline const oShutdown* internal_default_instance() {
    return reinterpret_cast<const oShutdown*>(
               &_oShutdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(oShutdown& a, oShutdown& b) {
    a.Swap(&b);
  }
  inline void Swap(oShutdown* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(oShutdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline oShutdown* New() const final {
    return CreateMaybeMessage<oShutdown>(nullptr);
  }

  oShutdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<oShutdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const oShutdown& from);
  void MergeFrom(const oShutdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(oShutdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "architecture.oShutdown";
  }
  protected:
  explicit oShutdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_architecture_2eproto);
    return ::descriptor_table_architecture_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:architecture.oShutdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_architecture_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// oAddress

// int32 area = 1;
inline void oAddress::clear_area() {
  area_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAddress::_internal_area() const {
  return area_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAddress::area() const {
  // @@protoc_insertion_point(field_get:architecture.oAddress.area)
  return _internal_area();
}
inline void oAddress::_internal_set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  area_ = value;
}
inline void oAddress::set_area(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_area(value);
  // @@protoc_insertion_point(field_set:architecture.oAddress.area)
}

// string ip = 2;
inline void oAddress::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& oAddress::ip() const {
  // @@protoc_insertion_point(field_get:architecture.oAddress.ip)
  return _internal_ip();
}
inline void oAddress::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:architecture.oAddress.ip)
}
inline std::string* oAddress::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:architecture.oAddress.ip)
  return _internal_mutable_ip();
}
inline const std::string& oAddress::_internal_ip() const {
  return ip_.Get();
}
inline void oAddress::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void oAddress::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:architecture.oAddress.ip)
}
inline void oAddress::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:architecture.oAddress.ip)
}
inline void oAddress::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:architecture.oAddress.ip)
}
inline std::string* oAddress::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* oAddress::release_ip() {
  // @@protoc_insertion_point(field_release:architecture.oAddress.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oAddress::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:architecture.oAddress.ip)
}

// int32 port = 3;
inline void oAddress::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAddress::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAddress::port() const {
  // @@protoc_insertion_point(field_get:architecture.oAddress.port)
  return _internal_port();
}
inline void oAddress::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void oAddress::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:architecture.oAddress.port)
}

// -------------------------------------------------------------------

// oReport

// int32 id = 1;
inline void oReport::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oReport::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oReport::id() const {
  // @@protoc_insertion_point(field_get:architecture.oReport.id)
  return _internal_id();
}
inline void oReport::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void oReport::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:architecture.oReport.id)
}

// string name = 2;
inline void oReport::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& oReport::name() const {
  // @@protoc_insertion_point(field_get:architecture.oReport.name)
  return _internal_name();
}
inline void oReport::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:architecture.oReport.name)
}
inline std::string* oReport::mutable_name() {
  // @@protoc_insertion_point(field_mutable:architecture.oReport.name)
  return _internal_mutable_name();
}
inline const std::string& oReport::_internal_name() const {
  return name_.Get();
}
inline void oReport::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void oReport::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:architecture.oReport.name)
}
inline void oReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:architecture.oReport.name)
}
inline void oReport::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:architecture.oReport.name)
}
inline std::string* oReport::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* oReport::release_name() {
  // @@protoc_insertion_point(field_release:architecture.oReport.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:architecture.oReport.name)
}

// .architecture.oAddress address = 3;
inline bool oReport::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool oReport::has_address() const {
  return _internal_has_address();
}
inline void oReport::clear_address() {
  if (GetArena() == nullptr && address_ != nullptr) {
    delete address_;
  }
  address_ = nullptr;
}
inline const ::architecture::oAddress& oReport::_internal_address() const {
  const ::architecture::oAddress* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::architecture::oAddress&>(
      ::architecture::_oAddress_default_instance_);
}
inline const ::architecture::oAddress& oReport::address() const {
  // @@protoc_insertion_point(field_get:architecture.oReport.address)
  return _internal_address();
}
inline void oReport::unsafe_arena_set_allocated_address(
    ::architecture::oAddress* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:architecture.oReport.address)
}
inline ::architecture::oAddress* oReport::release_address() {
  
  ::architecture::oAddress* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::architecture::oAddress* oReport::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:architecture.oReport.address)
  
  ::architecture::oAddress* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::architecture::oAddress* oReport::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::architecture::oAddress>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::architecture::oAddress* oReport::mutable_address() {
  // @@protoc_insertion_point(field_mutable:architecture.oReport.address)
  return _internal_mutable_address();
}
inline void oReport::set_allocated_address(::architecture::oAddress* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete address_;
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(address);
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:architecture.oReport.address)
}

// int64 idfa = 4;
inline void oReport::clear_idfa() {
  idfa_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oReport::_internal_idfa() const {
  return idfa_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oReport::idfa() const {
  // @@protoc_insertion_point(field_get:architecture.oReport.idfa)
  return _internal_idfa();
}
inline void oReport::_internal_set_idfa(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  idfa_ = value;
}
inline void oReport::set_idfa(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_idfa(value);
  // @@protoc_insertion_point(field_set:architecture.oReport.idfa)
}

// -------------------------------------------------------------------

// oAssigneID

// int32 id = 1;
inline void oAssigneID::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAssigneID::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oAssigneID::id() const {
  // @@protoc_insertion_point(field_get:architecture.oAssigneID.id)
  return _internal_id();
}
inline void oAssigneID::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void oAssigneID::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:architecture.oAssigneID.id)
}

// -------------------------------------------------------------------

// oNoderInited

// -------------------------------------------------------------------

// oBroadcastNoder

// .architecture.oReport info = 1;
inline bool oBroadcastNoder::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool oBroadcastNoder::has_info() const {
  return _internal_has_info();
}
inline void oBroadcastNoder::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::architecture::oReport& oBroadcastNoder::_internal_info() const {
  const ::architecture::oReport* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::architecture::oReport&>(
      ::architecture::_oReport_default_instance_);
}
inline const ::architecture::oReport& oBroadcastNoder::info() const {
  // @@protoc_insertion_point(field_get:architecture.oBroadcastNoder.info)
  return _internal_info();
}
inline void oBroadcastNoder::unsafe_arena_set_allocated_info(
    ::architecture::oReport* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:architecture.oBroadcastNoder.info)
}
inline ::architecture::oReport* oBroadcastNoder::release_info() {
  
  ::architecture::oReport* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::architecture::oReport* oBroadcastNoder::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:architecture.oBroadcastNoder.info)
  
  ::architecture::oReport* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::architecture::oReport* oBroadcastNoder::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::architecture::oReport>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::architecture::oReport* oBroadcastNoder::mutable_info() {
  // @@protoc_insertion_point(field_mutable:architecture.oBroadcastNoder.info)
  return _internal_mutable_info();
}
inline void oBroadcastNoder::set_allocated_info(::architecture::oReport* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:architecture.oBroadcastNoder.info)
}

// -------------------------------------------------------------------

// oForwardClientMessage

// int32 protoid = 1;
inline void oForwardClientMessage::clear_protoid() {
  protoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oForwardClientMessage::_internal_protoid() const {
  return protoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oForwardClientMessage::protoid() const {
  // @@protoc_insertion_point(field_get:architecture.oForwardClientMessage.protoid)
  return _internal_protoid();
}
inline void oForwardClientMessage::_internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protoid_ = value;
}
inline void oForwardClientMessage::set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protoid(value);
  // @@protoc_insertion_point(field_set:architecture.oForwardClientMessage.protoid)
}

// int64 account = 2;
inline void oForwardClientMessage::clear_account() {
  account_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oForwardClientMessage::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oForwardClientMessage::account() const {
  // @@protoc_insertion_point(field_get:architecture.oForwardClientMessage.account)
  return _internal_account();
}
inline void oForwardClientMessage::_internal_set_account(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_ = value;
}
inline void oForwardClientMessage::set_account(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:architecture.oForwardClientMessage.account)
}

// bytes data = 3;
inline void oForwardClientMessage::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& oForwardClientMessage::data() const {
  // @@protoc_insertion_point(field_get:architecture.oForwardClientMessage.data)
  return _internal_data();
}
inline void oForwardClientMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:architecture.oForwardClientMessage.data)
}
inline std::string* oForwardClientMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:architecture.oForwardClientMessage.data)
  return _internal_mutable_data();
}
inline const std::string& oForwardClientMessage::_internal_data() const {
  return data_.Get();
}
inline void oForwardClientMessage::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void oForwardClientMessage::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:architecture.oForwardClientMessage.data)
}
inline void oForwardClientMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:architecture.oForwardClientMessage.data)
}
inline void oForwardClientMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:architecture.oForwardClientMessage.data)
}
inline std::string* oForwardClientMessage::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* oForwardClientMessage::release_data() {
  // @@protoc_insertion_point(field_release:architecture.oForwardClientMessage.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oForwardClientMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:architecture.oForwardClientMessage.data)
}

// -------------------------------------------------------------------

// oSendMessageToClient

// int32 protoid = 1;
inline void oSendMessageToClient::clear_protoid() {
  protoid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oSendMessageToClient::_internal_protoid() const {
  return protoid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 oSendMessageToClient::protoid() const {
  // @@protoc_insertion_point(field_get:architecture.oSendMessageToClient.protoid)
  return _internal_protoid();
}
inline void oSendMessageToClient::_internal_set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protoid_ = value;
}
inline void oSendMessageToClient::set_protoid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protoid(value);
  // @@protoc_insertion_point(field_set:architecture.oSendMessageToClient.protoid)
}

// int64 account = 2;
inline void oSendMessageToClient::clear_account() {
  account_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oSendMessageToClient::_internal_account() const {
  return account_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oSendMessageToClient::account() const {
  // @@protoc_insertion_point(field_get:architecture.oSendMessageToClient.account)
  return _internal_account();
}
inline void oSendMessageToClient::_internal_set_account(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  account_ = value;
}
inline void oSendMessageToClient::set_account(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:architecture.oSendMessageToClient.account)
}

// bytes data = 3;
inline void oSendMessageToClient::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& oSendMessageToClient::data() const {
  // @@protoc_insertion_point(field_get:architecture.oSendMessageToClient.data)
  return _internal_data();
}
inline void oSendMessageToClient::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:architecture.oSendMessageToClient.data)
}
inline std::string* oSendMessageToClient::mutable_data() {
  // @@protoc_insertion_point(field_mutable:architecture.oSendMessageToClient.data)
  return _internal_mutable_data();
}
inline const std::string& oSendMessageToClient::_internal_data() const {
  return data_.Get();
}
inline void oSendMessageToClient::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void oSendMessageToClient::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:architecture.oSendMessageToClient.data)
}
inline void oSendMessageToClient::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:architecture.oSendMessageToClient.data)
}
inline void oSendMessageToClient::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:architecture.oSendMessageToClient.data)
}
inline std::string* oSendMessageToClient::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* oSendMessageToClient::release_data() {
  // @@protoc_insertion_point(field_release:architecture.oSendMessageToClient.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void oSendMessageToClient::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:architecture.oSendMessageToClient.data)
}

// -------------------------------------------------------------------

// oLocation

// int64 id = 1;
inline void oLocation::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oLocation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 oLocation::id() const {
  // @@protoc_insertion_point(field_get:architecture.oLocation.id)
  return _internal_id();
}
inline void oLocation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void oLocation::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:architecture.oLocation.id)
}

// .architecture.eLocationType type = 2;
inline void oLocation::clear_type() {
  type_ = 0;
}
inline ::architecture::eLocationType oLocation::_internal_type() const {
  return static_cast< ::architecture::eLocationType >(type_);
}
inline ::architecture::eLocationType oLocation::type() const {
  // @@protoc_insertion_point(field_get:architecture.oLocation.type)
  return _internal_type();
}
inline void oLocation::_internal_set_type(::architecture::eLocationType value) {
  
  type_ = value;
}
inline void oLocation::set_type(::architecture::eLocationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:architecture.oLocation.type)
}

// -------------------------------------------------------------------

// oShutdown

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace architecture

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::architecture::eArchProtoID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::architecture::eArchProtoID>() {
  return ::architecture::eArchProtoID_descriptor();
}
template <> struct is_proto_enum< ::architecture::eLocationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::architecture::eLocationType>() {
  return ::architecture::eLocationType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_architecture_2eproto
